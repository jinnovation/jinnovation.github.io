#+TITLE: Writing
#+URI: /writing

#+OPTIONS: num:nil 

I've written about my work in the past. Here's a representative sample.

* Articles

** [[http://eng.uber.com/anomaly-detection/][Implementing Model-Agnosticism in Uberâ€™s Real-Time Anomaly Detection Platform]]

   One of my first sizeable projects at Uber Observability was implementing
   support for multiple forecasting models in our anomaly detection pipeline. The
   pre-existing architecture was built around a single-model assumption that
   stored forecasting results in a single, top-level mapping; this data model
   made it cumbersome to add in support for new forecasting models later down the
   line, as our team attempted to do shortly after I joined.

   [[file:img/dynamic-thresholds.png]]

   In this article, I give a brief overview of anomaly detection within Uber's
   Observability stack; detail the thought process that went into my design for a
   "model-agnostic" data model to extend the pre-existing one; as well as the
   resulting rollout strategy. 

   #+ATTR_HTML: :width 60% :height 60%
   [[file:img/multi-model.png]]

** [[http://eng.uber.com/observability-anomaly-detection/][Engineering a Job-based Forecasting Workflow for Observability Anomaly Detection]]

   My major project of early 2018 revolved around overhauling Observability
   Anomaly Detection's forecasting workflow to allow for performant forecast
   backfilling. In this article, I discuss the product-centric motivations for
   doing so, outline the primary performance bottlenecks, and discuss the design
   that the team decided to base our solution -- and all subsequent
   optimizations -- around.

   [[file:img/data-pooling.png]]
   
* Literate Programming

** [[https://jjin.info/dotemacs][Emacs configurations]]

   I've organized my Emacs configurations using [[https://orgmode.org/][Org mode]]. All Emacs Lisp
   snippets in the document are extracted out into a final init file, exposing
   the settings to Emacs.

